{"ast":null,"code":"var _jsxFileName = \"/home/richard/Projects/2019ncov/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from \"react\";\nimport \"./index.scss\";\nimport { Card, Col, Container, Row } from \"react-bootstrap\";\nimport { LineChart, Tooltip, XAxis, CartesianGrid, Line } from \"recharts\";\nimport data from \"../data.json\";\nvar keys = [\"2019-nCoV\", \"Swine Flu\", \"SARS\"];\n\nvar calculate = function calculate(days, category) {\n  var tmp = [];\n\n  var _loop = function _loop(x) {\n    keys.forEach(function (decease) {\n      if (!tmp[x]) tmp[x] = {\n        'name': 'Day ' + (x + 1)\n      };\n      var amount = data[category][decease][x];\n      tmp[x][decease] = amount ? amount : 0;\n    });\n  };\n\n  for (var x = 0; x < days; x++) {\n    _loop(x);\n  }\n\n  return tmp;\n};\n\nexport default function Index() {\n  console.log(data);\n  var death100 = useMemo(function () {\n    return calculate(100, 'deaths');\n  }, []);\n  var death45 = useMemo(function () {\n    return calculate(45, 'deaths');\n  }, []);\n  var infected100 = useMemo(function () {\n    return calculate(100, 'infected');\n  }, []);\n  var infected45 = useMemo(function () {\n    return calculate(45, 'infected');\n  }, []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"2019 Novel Coronavirus (2019-nCoV)\"), __jsx(\"p\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Last updated: \", data.lastUpdatedAt))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Deaths over time\",\n    subtitle: \"100 days\",\n    data: death100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), __jsx(Col, {\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Infections over time\",\n    subtitle: \"100 days\",\n    data: infected100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Deaths over time\",\n    subtitle: \"45 days\",\n    data: death45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), __jsx(Col, {\n    sm: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Infections over time\",\n    subtitle: \"45 days\",\n    data: infected45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))));\n}\n\nvar Chart = function Chart(_ref) {\n  var title = _ref.title,\n      subtitle = _ref.subtitle,\n      data = _ref.data;\n  return __jsx(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(Card.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, title), __jsx(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(LineChart, {\n    width: 400,\n    height: 400,\n    data: data,\n    margin: {\n      top: 5,\n      right: 20,\n      left: 10,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(CartesianGrid, {\n    stroke: \"#f5f5f5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"2019-nCoV\",\n    stroke: \"#ff7300\",\n    yAxisId: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"Swine Flu\",\n    stroke: \"#007300\",\n    yAxisId: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"SARS\",\n    stroke: \"#0073ff\",\n    yAxisId: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, subtitle)));\n};","map":{"version":3,"sources":["/home/richard/Projects/2019ncov/pages/index.js"],"names":["React","useMemo","Card","Col","Container","Row","LineChart","Tooltip","XAxis","CartesianGrid","Line","data","keys","calculate","days","category","tmp","x","forEach","decease","amount","Index","console","log","death100","death45","infected100","infected45","lastUpdatedAt","Chart","title","subtitle","top","right","left","bottom"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,OAAf,QAA6B,OAA7B;AACA,OAAO,cAAP;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,GAA9B,QAAwC,iBAAxC;AACA,SAAQC,SAAR,EAAmBC,OAAnB,EAA2BC,KAA3B,EAAiCC,aAAjC,EAA+CC,IAA/C,QAA0D,UAA1D;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,IAAMC,IAAI,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,MAA3B,CAAb;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAClC,MAAMC,GAAG,GAAG,EAAZ;;AADkC,6BAGzBC,CAHyB;AAI9BL,IAAAA,IAAI,CAACM,OAAL,CAAa,UAAAC,OAAO,EAAI;AACpB,UAAI,CAACH,GAAG,CAACC,CAAD,CAAR,EACID,GAAG,CAACC,CAAD,CAAH,GAAS;AAAC,gBAAQ,UAAUA,CAAC,GAAC,CAAZ;AAAT,OAAT;AAEJ,UAAIG,MAAM,GAAGT,IAAI,CAACI,QAAD,CAAJ,CAAeI,OAAf,EAAwBF,CAAxB,CAAb;AACAD,MAAAA,GAAG,CAACC,CAAD,CAAH,CAAOE,OAAP,IAAkBC,MAAM,GAAGA,MAAH,GAAY,CAApC;AACH,KAND;AAJ8B;;AAGlC,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;AAAA,UAAtBA,CAAsB;AAQ9B;;AAED,SAAOD,GAAP;AACH,CAdD;;AAgBA,eAAe,SAASK,KAAT,GAAiB;AAE5BC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AAEA,MAAMa,QAAQ,GAAGvB,OAAO,CAAC;AAAA,WAAMY,SAAS,CAAC,GAAD,EAAM,QAAN,CAAf;AAAA,GAAD,EAAiC,EAAjC,CAAxB;AACA,MAAMY,OAAO,GAAGxB,OAAO,CAAC;AAAA,WAAMY,SAAS,CAAC,EAAD,EAAK,QAAL,CAAf;AAAA,GAAD,EAAgC,EAAhC,CAAvB;AACA,MAAMa,WAAW,GAAGzB,OAAO,CAAC;AAAA,WAAMY,SAAS,CAAC,GAAD,EAAM,UAAN,CAAf;AAAA,GAAD,EAAmC,EAAnC,CAA3B;AACA,MAAMc,UAAU,GAAG1B,OAAO,CAAC;AAAA,WAAMY,SAAS,CAAC,EAAD,EAAK,UAAL,CAAf;AAAA,GAAD,EAAkC,EAAlC,CAA1B;AAGA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADC,EAED;AAAG,IAAA,SAAS,EAAE,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA4CF,IAAI,CAACiB,aAAjD,CAFC,CAAL,CADJ,EAKI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,kBAAb;AAAgC,IAAA,QAAQ,EAAE,UAA1C;AAAsD,IAAA,IAAI,EAAEJ,QAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CAAL,EAGI,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,sBAAb;AAAoC,IAAA,QAAQ,EAAE,UAA9C;AAA0D,IAAA,IAAI,EAAEE,WAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAHJ,CALJ,EAWI,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,kBAAb;AAAgC,IAAA,QAAQ,EAAE,SAA1C;AAAqD,IAAA,IAAI,EAAED,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CAAL,EAGI,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,sBAAb;AAAoC,IAAA,QAAQ,EAAE,SAA9C;AAAyD,IAAA,IAAI,EAAEE,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAHJ,CAXJ,CADJ;AAoBH;;AAED,IAAME,KAAK,GAAG,SAARA,KAAQ,OAA6B;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,QAAoB,QAApBA,QAAoB;AAAA,MAAVpB,IAAU,QAAVA,IAAU;AACvC,SAAO,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,MAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcmB,KAAd,CADG,EAEH,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAE,GADX;AAEI,IAAA,MAAM,EAAE,GAFZ;AAGI,IAAA,IAAI,EAAEnB,IAHV;AAII,IAAA,MAAM,EAAE;AAAEqB,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,KAAK,EAAE,EAAjB;AAAqBC,MAAAA,IAAI,EAAE,EAA3B;AAA+BC,MAAAA,MAAM,EAAE;AAAvC,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMI,MAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,EAOI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EAQI,MAAC,aAAD;AAAe,IAAA,MAAM,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAE,WAA/B;AAA4C,IAAA,MAAM,EAAC,SAAnD;AAA6D,IAAA,OAAO,EAAE,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAE,WAA/B;AAA4C,IAAA,MAAM,EAAC,SAAnD;AAA6D,IAAA,OAAO,EAAE,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAE,MAA/B;AAAuC,IAAA,MAAM,EAAC,SAA9C;AAAwD,IAAA,OAAO,EAAE,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADJ,EAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIJ,QAAJ,CAdJ,CAFG,CAAP;AAmBH,CApBD","sourcesContent":["import React, {useMemo} from \"react\"\nimport \"./index.scss\"\nimport {Card, Col, Container, Row} from \"react-bootstrap\";\nimport {LineChart, Tooltip,XAxis,CartesianGrid,Line} from \"recharts\"\nimport data from \"../data.json\"\n\nconst keys = [\"2019-nCoV\", \"Swine Flu\", \"SARS\"]\n\nconst calculate = (days, category) => {\n    const tmp = []\n\n    for (let x = 0; x < days; x++) {\n        keys.forEach(decease => {\n            if (!tmp[x])\n                tmp[x] = {'name': 'Day ' + (x+1)}\n\n            let amount = data[category][decease][x];\n            tmp[x][decease] = amount ? amount : 0\n        })\n    }\n\n    return tmp\n}\n\nexport default function Index() {\n\n    console.log(data);\n\n    const death100 = useMemo(() => calculate(100, 'deaths'), [])\n    const death45 = useMemo(() => calculate(45, 'deaths'), [])\n    const infected100 = useMemo(() => calculate(100, 'infected'), [])\n    const infected45 = useMemo(() => calculate(45, 'infected'), [])\n\n\n    return (\n        <Container>\n            <Row><Col xs={12}>\n                <h1>2019 Novel Coronavirus (2019-nCoV)</h1>\n                <p className={\"text-center\"}>Last updated: {data.lastUpdatedAt}</p>\n            </Col></Row>\n            <Row><Col sm={6}>\n                <Chart title=\"Deaths over time\" subtitle={\"100 days\"} data={death100} />\n            </Col>\n                <Col sm={6}>\n                    <Chart title=\"Infections over time\" subtitle={\"100 days\"} data={infected100} />\n                </Col></Row>\n            <Row><Col sm={6}>\n                <Chart title=\"Deaths over time\" subtitle={\"45 days\"} data={death45} />\n            </Col>\n                <Col sm={6}>\n                    <Chart title=\"Infections over time\" subtitle={\"45 days\"} data={infected45} />\n                </Col></Row>\n        </Container>\n    )\n}\n\nconst Chart = ({title, subtitle, data}) => {\n    return <Card>\n        <Card.Header>{title}</Card.Header>\n        <Card.Body>\n            <LineChart\n                width={400}\n                height={400}\n                data={data}\n                margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n            >\n                <XAxis dataKey=\"name\" />\n                <Tooltip />\n                <CartesianGrid stroke=\"#f5f5f5\" />\n                <Line type=\"monotone\" dataKey={\"2019-nCoV\"} stroke=\"#ff7300\" yAxisId={0} />\n                <Line type=\"monotone\" dataKey={\"Swine Flu\"} stroke=\"#007300\" yAxisId={0} />\n                <Line type=\"monotone\" dataKey={\"SARS\"} stroke=\"#0073ff\" yAxisId={0} />\n            </LineChart>\n            <p>{subtitle}</p>\n        </Card.Body>\n    </Card>\n}"]},"metadata":{},"sourceType":"module"}