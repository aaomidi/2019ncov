{"ast":null,"code":"var _jsxFileName = \"/home/richard/Projects/2019ncov/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from \"react\";\nimport \"./index.scss\";\nimport { Card, Col, Container, Row } from \"react-bootstrap\";\nimport { LineChart, Tooltip, XAxis, CartesianGrid, Line, Legend } from \"recharts\";\nimport data from \"../data.json\";\nconst keys = [\"2019-nCoV\", \"Swine Flu\", \"SARS\"];\n\nconst calculate = (days, category) => {\n  const tmp = [];\n\n  for (let x = 0; x < days; x++) {\n    keys.forEach(decease => {\n      if (!tmp[x]) tmp[x] = {\n        'name': 'Day ' + (x + 1)\n      };\n      let amount = data[category][decease][x];\n      tmp[x][decease] = amount ? amount : NaN;\n    });\n  }\n\n  return tmp;\n};\n\nexport default function Index() {\n  const death100 = useMemo(() => calculate(100, 'deaths'), []);\n  const death45 = useMemo(() => calculate(45, 'deaths'), []);\n  const infected100 = useMemo(() => calculate(100, 'infected'), []);\n  const infected45 = useMemo(() => calculate(45, 'infected'), []);\n  return __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(Col, {\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"2019 Novel Coronavirus (2019-nCoV)\"), __jsx(\"p\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Last updated: \", data.lastUpdatedAt))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Deaths over 100 days\",\n    data: death100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Infections over 100 days\",\n    data: infected100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Deaths over 45 days\",\n    data: death45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))), __jsx(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(Col, {\n    sm: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Chart, {\n    title: \"Infections over 45 days\",\n    data: infected45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }))));\n}\n\nconst Chart = ({\n  title,\n  data\n}) => {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, title), __jsx(LineChart, {\n    width: 1068,\n    height: 400,\n    data: data,\n    margin: {\n      top: 5,\n      right: 20,\n      left: 10,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), __jsx(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(CartesianGrid, {\n    stroke: \"#f5f5f5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"2019-nCoV\",\n    stroke: \"#ff7300\",\n    yAxisId: 0,\n    dot: false,\n    strokeWidth: 2,\n    legendType: \"circle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"Swine Flu\",\n    stroke: \"#007300\",\n    yAxisId: 0,\n    dot: false,\n    legendType: \"triangle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"SARS\",\n    stroke: \"#0073ff\",\n    yAxisId: 0,\n    dot: false,\n    legendType: \"star\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), __jsx(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/home/richard/Projects/2019ncov/pages/index.js"],"names":["React","useMemo","Card","Col","Container","Row","LineChart","Tooltip","XAxis","CartesianGrid","Line","Legend","data","keys","calculate","days","category","tmp","x","forEach","decease","amount","NaN","Index","death100","death45","infected100","infected45","lastUpdatedAt","Chart","title","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, {useMemo} from \"react\"\nimport \"./index.scss\"\nimport {Card, Col, Container, Row} from \"react-bootstrap\";\nimport {LineChart, Tooltip,XAxis,CartesianGrid,Line, Legend} from \"recharts\"\nimport data from \"../data.json\"\n\nconst keys = [\"2019-nCoV\", \"Swine Flu\", \"SARS\"]\n\nconst calculate = (days, category) => {\n    const tmp = []\n\n    for (let x = 0; x < days; x++) {\n        keys.forEach(decease => {\n            if (!tmp[x])\n                tmp[x] = {'name': 'Day ' + (x+1)}\n\n            let amount = data[category][decease][x];\n            tmp[x][decease] = amount ? amount : NaN\n        })\n    }\n\n    return tmp\n}\n\nexport default function Index() {\n    const death100 = useMemo(() => calculate(100, 'deaths'), [])\n    const death45 = useMemo(() => calculate(45, 'deaths'), [])\n    const infected100 = useMemo(() => calculate(100, 'infected'), [])\n    const infected45 = useMemo(() => calculate(45, 'infected'), [])\n\n\n    return (\n        <Container>\n            <Row><Col xs={12}>\n                <h1>2019 Novel Coronavirus (2019-nCoV)</h1>\n                <p className={\"text-center\"}>Last updated: {data.lastUpdatedAt}</p>\n            </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <Chart title=\"Deaths over 100 days\" data={death100} />\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <Chart title=\"Infections over 100 days\" data={infected100} />\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <Chart title=\"Deaths over 45 days\" data={death45} />\n                </Col>\n            </Row>\n            <Row>\n                <Col sm={12}>\n                    <Chart title=\"Infections over 45 days\" data={infected45} />\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nconst Chart = ({title, data}) => {\n    return <div>\n        <h1>{title}</h1>\n        <LineChart\n            width={1068}\n            height={400}\n            data={data}\n            margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n        >\n            <XAxis dataKey=\"name\" />\n            <Tooltip />\n            <CartesianGrid stroke=\"#f5f5f5\" />\n            <Line type=\"monotone\" dataKey={\"2019-nCoV\"} stroke=\"#ff7300\" yAxisId={0} dot={false} strokeWidth={2} legendType={\"circle\"} />\n            <Line type=\"monotone\" dataKey={\"Swine Flu\"} stroke=\"#007300\" yAxisId={0} dot={false} legendType={\"triangle\"}/>\n            <Line type=\"monotone\" dataKey={\"SARS\"} stroke=\"#0073ff\" yAxisId={0} dot={false} legendType={\"star\"}/>\n            <Legend/>\n        </LineChart>\n    </div>\n}"]},"metadata":{},"sourceType":"module"}